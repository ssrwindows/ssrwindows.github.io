<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://ssrwindows.github.io/news/article-20955.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Vue.js 3.x 双向绑定原理_在线工具</title>
        <meta name="description" content="什么是双向绑定？ 废话不多说，我们先来看一个 v-model 基本的示例： &lt;input type="text" v-model="search"&gt;  首先，我们要明白一点的是：v-mod" />
        <link rel="icon" href="/assets/website/img/ssrwindows/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/ssrwindows/aos/aos.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/ssrwindows/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/ssrwindows/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/ssrwindows/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/ssrwindows/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/ssrwindows/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/ssrwindows/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-RSKEBF5GLS"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-RSKEBF5GLS');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top  header-transparent ">
        <div class="container d-flex align-items-center justify-content-between">
            <div class="logo">
                                <a href="/">SSR Windows</a>
                            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs" style="margin-top: 5rem;">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>Vue.js 3.x 双向绑定原理_在线工具</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= Details Section ======= -->
        <section id="details" class="details">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="什么是双向绑定">什么是双向绑定？</h2> <p>废话不多说，我们先来看一个 <code>v-model</code> 基本的示例：</p> <pre><code class="language-html">&lt;input type="text" v-model="search"&gt; </code></pre> <p>首先，我们要明白一点的是：<strong><code>v-model</code> 的本质是指令</strong>。因此，它跟我们一般的自定义指令是一样的，需要实现 <code>Vue.js</code> 生命周期的钩子函数。</p> <p>其次，<code>v-model</code> 实现了双向绑定，也就是：<strong>数据到 DOM 的单向流动</strong>、<strong>DOM 到数据的单向流动</strong>。</p> <p>明白了上面这两点，再来看代码就清晰多了。</p> <pre><code class="language-typescript">// packages/runtime-dom/src/directives/vModel.ts  export const vModelText: ModelDirective&lt;   HTMLInputElement | HTMLTextAreaElement &gt; = {   created() {},   mounted() {},   beforeUpdate() {} } </code></pre> <p>打开 <code>v-model</code> 的源码我们可以看到，它实现了对应的 <code>Vue.js</code> 生命周期钩子函数，实际上它就是一个内置的自定义指令。</p> <p>那么，<code>v-model</code> 如何实现双向绑定的呢？具体来说，<strong>数据到 DOM 的单向流动</strong>以及<strong>DOM 到数据的单向流动</strong>是如何实现的。</p> <h2 id="数据到-dom-的单向流动">数据到 DOM 的单向流动</h2> <pre><code class="language-typescript">// packages/runtime-dom/src/directives/vModel.ts  export const vModelText: ModelDirective&lt;   HTMLInputElement | HTMLTextAreaElement &gt; = {   // set value on mounted so it's after min/max for type="range"   mounted(el, { value }) {     el.value = value == null ? '' : value   } } </code></pre> <p>数据到 DOM 的单向流动实现非常简单，一行代码就搞定了，就是把 <code>v-model</code> 绑定的值赋值给 <code>el.value</code>。</p> <h2 id="dom-到数据的单向流动">DOM 到数据的单向流动</h2> <pre><code class="language-typescript">// packages/runtime-dom/src/directives/vModel.ts  export const vModelText: ModelDirective&lt;   HTMLInputElement | HTMLTextAreaElement &gt; = {   created(el, { modifiers: { lazy, trim, number } }, vnode) {     el._assign = getModelAssigner(vnode)          // see: https://github.com/vuejs/core/issues/3813     const castToNumber = number || (vnode.props &amp;&amp; vnode.props.type === 'number')          // 实现 lazy 功能     addEventListener(el, lazy ? 'change' : 'input', e =&gt; {       // `composing=true` 时不把 DOM 的值赋值给数据       if ((e.target as any).composing) return              let domValue: string | number = el.value       if (trim) {         domValue = domValue.trim()       } else if (castToNumber) {         domValue = toNumber(domValue)       }              // DOM 的值改变时，同时改变对应的数据（即改变 v-model 上绑定的变量的值）       el._assign(domValue)     })          // 实现 trim 功能     if (trim) {       addEventListener(el, 'change', () =&gt; {         el.value = el.value.trim()       })     }          // 不配置 lazy 时，监听的是 input 的 input 事件，它会在用户实时输入的时候触发。     // 此外，还会多监听 compositionstart 和 compositionend 事件。     if (!lazy) {     	// 这是因为，用户使用拼音输入法开始输入汉字时，这个事件会被触发，     	// 此时，设置 `composing=true`，在 input 事件回调里可以进行判断，避免将 DOM 的值赋值给数据，       // 因为此时并未输入完成。       addEventListener(el, 'compositionstart', onCompositionStart)              // 当用户从输入法中确定选中了一些数据完成输入后（如中文输入法常见的按空格确认输入的文字），       // 设置 `composing=false`，在 onCompositionEnd 中手动触发 input 事件，完成数据的赋值。       addEventListener(el, 'compositionend', onCompositionEnd)              // Safari &lt; 10.2 &amp; UIWebView doesn't fire compositionend when       // switching focus before confirming composition choice       // this also fixes the issue where some browsers e.g. iOS Chrome       // fires "change" instead of "input" on autocomplete.       addEventListener(el, 'change', onCompositionEnd)     }   } }  function onCompositionStart(e: Event) {   (e.target as any).composing = true }  function onCompositionEnd(e: Event) {   const target = e.target as any   if (target.composing) {     target.composing = false     target.dispatchEvent(new Event('input'))   } }  const getModelAssigner = (vnode: VNode): AssignerFn =&gt; {   const fn = vnode.props!['onUpdate:modelValue']   return isArray(fn) ? value =&gt; invokeArrayFns(fn, value) : fn } </code></pre> <p>代码有点多，但原理很简单：</p> <ul> <li>通过自定义监听事件 <code>addEventListener</code> 来监听 <code>input</code> 元素的 <code>input</code> 或 <code>change</code> 事件</li> <li>当用户手动输入数据时执行对应的函数，并通过 <code>el.value</code> 获取 <code>input</code> 的新值</li> <li>调用 <code>el._assign</code> （<code>onUpdate:modelValue</code> 属性对应的函数）方法 <code>v-model</code> 绑定的值</li> </ul> <p>而实现 DOM 到数据的单向流动，关键就在 <code>onUpdate:modelValue</code>。借助 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://vue-next-template-explorer.netlify.app/"  target="_blank"  rel="nofollow">Vue 3 Template Explorer</a>，我们可以查看其编译后生成的 <code>render</code> 函数，可以发现它做所的事情并没有什么神奇的地方，就是帮我们自动更新 <code>v-model</code> 上绑定的变量的值。</p> <pre><code class="language-javascript">&lt;input type="text" v-model="search"&gt;  import { vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue"  export function render(_ctx, _cache, $props, $setup, $data, $options) {   return _withDirectives((_openBlock(), _createElementBlock("input", {     type: "text",          // `onUpdate:modelValue` 所做的事，     // 就是自动帮我们更新 `v-model` 上绑定的变量的值。     "onUpdate:modelValue": $event =&gt; ((_ctx.search) = $event)        }, null, 8 /* PROPS */, ["onUpdate:modelValue"])), [     [_vModelText, _ctx.search]   ]) } </code></pre> <p>除此之外，还有对 <code>lazy</code> 的处理、<code>trim</code> 的处理、数字的处理、以及解决正在输入时文本被清空的问题。</p> <p>关于 <code>onCompositionStart</code> 和 <code>onCompositionEnd</code> 两个方法的作用，详见 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/vuejs/core/issues/2302"  target="_blank"  rel="nofollow">text added with IME to input that has v-model is gone when the view is updated #2302</a>。</p> <p><strong>一句话总结：通过使用 <code>addEventListener</code> 来实现 DOM 到数据的单向流动</strong>。</p> <p>最后是 <code>beforeUpdate</code> 的实现，如果数据的值和 DOM 的值不一致，则将数据更新到 DOM：</p> <pre><code class="language-javascript">// packages/runtime-dom/src/directives/vModel.ts  beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {     el._assign = getModelAssigner(vnode)     // avoid clearing unresolved text. #2302   	// 输入某些语言如中文，在没有输入完成时，在更新时会自动将已存在的文本清空，具体可见 issue#2302     if ((el as any).composing) return        if (document.activeElement === el) {       if (lazy) {         return       }       if (trim &amp;&amp; el.value.trim() === value) {         return       }       if ((number || el.type === 'number') &amp;&amp; toNumber(el.value) === value) {         return       }     }     const newValue = value == null ? '' : value     if (el.value !== newValue) {       el.value = newValue     }   } </code></pre> <p>以上就是 <code>text</code> 类型的 <code>input</code> 元素双向绑定原理，当然 <code>input</code> 元素类型不止这个，还有诸如 <code>radio</code>、<code>checkbox</code> 等类型，大家有兴趣的话可以自己去看，但是原理都是相同的，就是实现两个功能：<strong>数据到 DOM 的单向流动</strong>、<strong>DOM 到数据的单向流动</strong>。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-20954.htm">java实现线程安全的单例模型</a></p>
                                        <p>下一个：<a href="/news/article-21407.htm">Tomcat 部署 Web项目以及更改项目名</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-4-node-share-links.htm" title="10月4日|Shadowrocket/SSR/V2ray/Clash每天更新22.5M/S免费节点订阅链接">10月4日|Shadowrocket/SSR/V2ray/Clash每天更新22.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-6-free-node-subscribe-links.htm" title="9月6日|V2ray/Clash/Shadowrocket/SSR每天更新18.5M/S免费节点订阅链接">9月6日|V2ray/Clash/Shadowrocket/SSR每天更新18.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-1-node-share-links.htm" title="8月1日|Shadowrocket/V2ray/SSR/Clash每天更新20.8M/S免费节点订阅链接">8月1日|Shadowrocket/V2ray/SSR/Clash每天更新20.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-20-free-node-subscribe-links.htm" title="9月20日|V2ray/Clash/SSR/Shadowrocket每天更新22.2M/S免费节点订阅链接">9月20日|V2ray/Clash/SSR/Shadowrocket每天更新22.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-17-free-node-subscribe-links.htm" title="8月17日|V2ray/Clash/Shadowrocket/SSR每天更新22M/S免费节点订阅链接">8月17日|V2ray/Clash/Shadowrocket/SSR每天更新22M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-3-free-node-subscribe-links.htm" title="10月3日|Clash/Shadowrocket/SSR/V2ray每天更新23M/S免费节点订阅链接">10月3日|Clash/Shadowrocket/SSR/V2ray每天更新23M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-23-free-ssr-node.htm" title="11月23日|SSR/V2ray/Shadowrocket/Clash每天更新19.5M/S免费节点订阅链接，付费节点订阅推荐">11月23日|SSR/V2ray/Shadowrocket/Clash每天更新19.5M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-22-free-subscribe-node.htm" title="8月22日|Clash/Shadowrocket/V2ray/SSR每天更新22.9M/S免费节点订阅链接">8月22日|Clash/Shadowrocket/V2ray/SSR每天更新22.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-21-free-ssr-node.htm" title="11月21日|Clash/Shadowrocket/V2ray/SSR每天更新19.5M/S免费节点订阅链接，付费节点订阅推荐">11月21日|Clash/Shadowrocket/V2ray/SSR每天更新19.5M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-5-node-share-links.htm" title="8月5日|Shadowrocket/Clash/SSR/V2ray每天更新22.5M/S免费节点订阅链接">8月5日|Shadowrocket/Clash/SSR/V2ray每天更新22.5M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End Details Section -->
    </main><!-- End #main -->
    <!-- ======= Footer ======= -->
<footer id="footer">
    <div class="container py-4">
        <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <a href="/">SSR Windows免费节点订阅站</a> 版权所有 Powered by WordPress
        </div>
    </div>
</footer><!-- End Footer -->
<a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
<!-- Vendor JS Files -->
<script src="/assets/website/js/frontend/ssrwindows/jquery-3.5.1.min.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/aos/aos.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/glightbox/js/glightbox.min.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/php-email-form/validate.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/swiper/swiper-bundle.min.js"></script>
<!-- Template Main JS File -->
<script src="/assets/website/js/frontend/ssrwindows/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
<script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>