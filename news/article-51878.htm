<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://ssrwindows.github.io/news/article-51878.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>@FeignClient注解的接口，用@Autowired可能获取不到实例</title>
        <meta name="description" content="背景： Spring-Boot&nbsp;2.0.8.RELEASE Spring-Cloud&nbsp;2.0.4.RELEASE OpenFeign&nbsp;2.0.4.RELEASE JDK " />
        <link rel="icon" href="/assets/website/img/ssrwindows/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SSR Windows免费节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://ssrwindows.github.io/news/article-51878.htm" />
    <meta property="og:site_name" content="SSR Windows免费节点订阅站" />
    <meta property="og:title" content="@FeignClient注解的接口，用@Autowired可能获取不到实例" />
    <meta property="og:image" content="https://ssrwindows.github.io/uploads/20240730/dbd013393ec2050a4c6df0b5d3c2232f.webp" />
        <meta property="og:release_date" content="2025-02-06T05:28:07" />
    <meta property="og:updated_time" content="2025-02-06T05:28:07" />
        <meta property="og:description" content="背景： Spring-Boot&nbsp;2.0.8.RELEASE Spring-Cloud&nbsp;2.0.4.RELEASE OpenFeign&nbsp;2.0.4.RELEASE JDK " />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="@FeignClient注解的接口，用@Autowired可能获取不到实例">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/ssrwindows/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/ssrwindows/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/ssrwindows/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/ssrwindows/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/ssrwindows/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/ssrwindows/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/ssrwindows/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-RSKEBF5GLS"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-RSKEBF5GLS');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top  header-transparent ">
        <div class="container d-flex align-items-center justify-content-between">
            <div class="logo">
                <a href="/">
                                <span>SSR Windows</span>
                                </a>
            </div>
            <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/client.htm">客户端</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs Section ======= -->
        <section class="breadcrumbs" style="margin-top: 5rem;">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h1>@FeignClient注解的接口，用@Autowired可能获取不到实例</h1>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs Section -->
        <!-- ======= Details Section ======= -->
        <section id="details" class="details">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>背景：</p> <p>Spring-Boot&nbsp;2.0.8.RELEASE</p> <p>Spring-Cloud&nbsp;2.0.4.RELEASE</p> <p>OpenFeign&nbsp;2.0.4.RELEASE</p> <p>JDK 1.8</p> <p>启动类：</p> <pre><code class="language-java">package com.xxx.tfb;  import java.sql.SQLException;  import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory; import org.camunda.bpm.spring.boot.starter.annotation.EnableProcessApplication; import org.h2.tools.Server; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker; import org.springframework.cloud.netflix.eureka.EnableEurekaClient; import org.springframework.cloud.netflix.hystrix.EnableHystrix; import org.springframework.cloud.openfeign.EnableFeignClients; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.FilterType;  import com.xxx.framework.config.SecondDataSourceConfiguration;  import springfox.documentation.swagger2.annotations.EnableSwagger2;  @EnableEurekaClient @EnableFeignClients(basePackages="com.xxx") @EnableCircuitBreaker @EnableProcessApplication @EnableHystrix @SpringBootApplication @EnableSwagger2 @MapperScan(basePackages = { "com.xxx.**.mapper" }) @MapperScan(basePackages = { "com.xxx.**.oramapper" }) @ComponentScan(excludeFilters = {@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = {SecondDataSourceConfiguration.class})}) @ComponentScan(basePackages = { "com.xxx.framework","com.xxx.workflow", 		"com.xxx.tradeengine","com.xxx.component", 		"com.xxx.controller", "com.xxx.bizservice", 		"com.xxx.rpc","com.xxx.dto.rpc", 		"com.xxx.fallbackservice","com.xxx.helper" }) @SuppressWarnings("all") public class TfbOrBizServiceApplication  { 	private static Log log=LogFactory.getLog(TfbOrBizServiceApplication.class); 	 	public static void main(String[] args) { 		SpringApplication.run(TfbOrBizServiceApplication.class, args); 	} }</code></pre> <p>Feign客户端：</p> <pre><code class="language-java">package com.xxx.rpc;  import java.util.List;  import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;  import com.xxx.dto.tfb.function.UnitBizRequestDto; import com.xxx.dto.tfb.function.UnitBizResponseDto; import com.xxx.framework.dto.PaginationDto; import com.xxx.framework.web.controller.PageRequestDto; import com.xxx.framework.web.controller.ResponseDto;  @FeignClient(value = "tfb-biz-common-service-app", path="/tfb-biz-common-service-app") public interface CommonBizRpc { 	 	/** 	 * 获取交易日期 	 */ 	@RequestMapping(value = "/leftQuery/queryAcctDate", method = RequestMethod.POST) 	public ResponseDto&lt;String&gt; queryAcctDate(); }</code></pre> <p>使用的地方：</p> <pre><code class="language-java">package com.xxx.tfb.component.or;  import org.springframework.context.annotation.DependsOn; import org.springframework.stereotype.Component;  import com.xxx.TradeDto; import com.xxx.bizenum.tfb.CommonEnum; import com.xxx.framework.utils.SpringContextUtil; import com.xxx.rpc.CommonBizRpc; import com.xxx.tradeengine.dto.DataContext; import com.xxx.tradeengine.parser.TradeComponent;  @Component @DependsOn("springContextUtil") public class OrOpenFxccDataInitComponentImpl implements TradeComponent { 	//公共交易服务 	CommonBizRpc commonBizRpc = SpringContextUtil.getBean("commonBizRpc"); 			 	@Override 	public void exec(DataContext dataContext) { 		//交易日期 		orDto.setTxDt(commonBizRpc.queryAcctDate().getData()); 	}  }</code></pre> <p>SpringContextUtil工具类：</p> <pre><code class="language-java"> @Component public class SpringContextUtil implements ApplicationContextAware { 	private static ApplicationContext applicationContext; // Spring应用上下文环境       	/** 	 * 实现ApplicationContextAware接口的回调方法，设置上下文环境 	 *  	 * @param applicationContext @ 	 */ 	@Override 	public void setApplicationContext(ApplicationContext applicationContext) { 		SpringContextUtil.applicationContext = applicationContext; 	}  	/** 	 * 获取对象 	 *  	 * @param name 	 * @return Object 一个以所给名字注册的bean的实例 @ 	 */ 	@SuppressWarnings("unchecked") 	public static &lt;T&gt; T getBean(String name) { 		return (T) applicationContext.getBean(name); 	}  }</code></pre> <p>这样的配置，应用启动的时候报错了：</p> <pre><code>Constructor in com.xxx.tfb.component.or.OrOpenFxccDataInitComponentImpl required a bean named 'commonBizRpc' that could not be found.  Action:  Consider defining a bean named 'commonBizRpc' in your configuration.</code></pre> <p>报错的意思是不存在name为commonBizRpc的实例。已经在@EnableFeignClients(basePackages="com.xxx")配置了basePackages，而且可以确定该@FeignClient已经被扫描到了。</p> <p>为什么提示找不到呢？</p> <p>分析下源码：</p> <p>@EnableFeignClients 注解：</p> <pre><code class="language-java">@Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(FeignClientsRegistrar.class) public @interface EnableFeignClients {<!-- --></code></pre> <p>注意上面导入的FeignClientsRegistrar类，该类实现了将@FeignClient注解的接口加入到Spring管理的容器里：</p> <pre><code class="language-java">	@Override 	public void registerBeanDefinitions(AnnotationMetadata metadata, 			BeanDefinitionRegistry registry) { 		registerDefaultConfiguration(metadata, registry); 		registerFeignClients(metadata, registry); 	} public void registerFeignClients(AnnotationMetadata metadata, 			BeanDefinitionRegistry registry) { 		ClassPathScanningCandidateComponentProvider scanner = getScanner(); 		scanner.setResourceLoader(this.resourceLoader);  		Set&lt;String&gt; basePackages;  		Map&lt;String, Object&gt; attrs = metadata 				.getAnnotationAttributes(EnableFeignClients.class.getName()); 		AnnotationTypeFilter annotationTypeFilter = new AnnotationTypeFilter( 				FeignClient.class); 		final Class&lt;?&gt;[] clients = attrs == null ? null 				: (Class&lt;?&gt;[]) attrs.get("clients"); 		if (clients == null || clients.length == 0) { 			scanner.addIncludeFilter(annotationTypeFilter); 			basePackages = getBasePackages(metadata); 		} 		else { 			final Set&lt;String&gt; clientClasses = new HashSet&lt;&gt;(); 			basePackages = new HashSet&lt;&gt;(); 			for (Class&lt;?&gt; clazz : clients) { 				basePackages.add(ClassUtils.getPackageName(clazz)); 				clientClasses.add(clazz.getCanonicalName()); 			} 			AbstractClassTestingTypeFilter filter = new AbstractClassTestingTypeFilter() { 				@Override 				protected boolean match(ClassMetadata metadata) { 					String cleaned = metadata.getClassName().replaceAll("\\$", "."); 					return clientClasses.contains(cleaned); 				} 			}; 			scanner.addIncludeFilter( 					new AllTypeFilter(Arrays.asList(filter, annotationTypeFilter))); 		}  		for (String basePackage : basePackages) { 			Set&lt;BeanDefinition&gt; candidateComponents = scanner 					.findCandidateComponents(basePackage); 			for (BeanDefinition candidateComponent : candidateComponents) { 				if (candidateComponent instanceof AnnotatedBeanDefinition) { 					// verify annotated class is an interface 					AnnotatedBeanDefinition beanDefinition = (AnnotatedBeanDefinition) candidateComponent; 					AnnotationMetadata annotationMetadata = beanDefinition.getMetadata(); 					Assert.isTrue(annotationMetadata.isInterface(), 							"@FeignClient can only be specified on an interface");  					Map&lt;String, Object&gt; attributes = annotationMetadata 							.getAnnotationAttributes( 									FeignClient.class.getCanonicalName());  					String name = getClientName(attributes); 					registerClientConfiguration(registry, name, 							attributes.get("configuration"));  					registerFeignClient(registry, annotationMetadata, attributes); 				} 			} 		} 	}  private void registerFeignClient(BeanDefinitionRegistry registry, 			AnnotationMetadata annotationMetadata, Map&lt;String, Object&gt; attributes) { 		String className = annotationMetadata.getClassName(); 		BeanDefinitionBuilder definition = BeanDefinitionBuilder 				.genericBeanDefinition(FeignClientFactoryBean.class); 		validate(attributes); 		definition.addPropertyValue("url", getUrl(attributes)); 		definition.addPropertyValue("path", getPath(attributes)); 		String name = getName(attributes); 		definition.addPropertyValue("name", name);         // className为带有包路径的类名 		definition.addPropertyValue("type", className); 		definition.addPropertyValue("decode404", attributes.get("decode404")); 		definition.addPropertyValue("fallback", attributes.get("fallback")); 		definition.addPropertyValue("fallbackFactory", attributes.get("fallbackFactory")); 		definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);          // 默认的别名         // 这里的name是服务方的名称，本示例为注册到Eureka里的服务名 		String alias = name + "FeignClient"; 		AbstractBeanDefinition beanDefinition = definition.getBeanDefinition();  		boolean primary = (Boolean)attributes.get("primary"); // has a default, won't be null  		beanDefinition.setPrimary(primary);          // 如果注解里加了qualifier，别名就使用qualifier里的名称 		String qualifier = getQualifier(attributes); 		if (StringUtils.hasText(qualifier)) { 			alias = qualifier; 		}  		BeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, className, 				new String[] { alias }); 		BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry); 	}</code></pre> <p>注意上面的registerFeignClients方法，交给Spring容器管理的实例的name默认是className，即带有包路径的name，本次示例为"com.xxx.rpc.CommonBizRpc"，默认的别名：<br /> &nbsp; &nbsp; &nbsp; &nbsp; // 这里的name是服务方的名称，本示例为注册到Eureka里的服务名，tfb-biz-common-service-appFeignClient<br /> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String alias = name + "FeignClient";</p> <p> &nbsp; &nbsp; &nbsp; &nbsp; // 如果注解里加了qualifier，别名就使用qualifier里的名称<br /> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;String qualifier = getQualifier(attributes);<br /> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;if (StringUtils.hasText(qualifier)) {<!-- --><br /> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;alias = qualifier;<br /> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</p> <p>这样在注入的时候，要么使用的name是com.xxx.rpc.CommonBizRpc而不能是CommonBizRpc，或tfb-biz-common-service-appFeignClient（如果该服务注册多个客户端，可能会报错），或使用CommonBizRpc.class</p> <p>SpringContextUtil.getBean();</p> <p>@AutoWired也一样</p> <p>为了方便使用，建议在每个@FeignClient里配置上qualifier，修改后的代码如下：</p> <pre><code class="language-java">package com.xxx.rpc;   import org.springframework.cloud.openfeign.FeignClient; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod;   @FeignClient(value = "tfb-biz-common-service-app", path="/tfb-biz-common-service-app", qualifier="commonBizRpc") public interface CommonBizRpc { 	 	/** 	 * 获取交易日期 	 */ 	@RequestMapping(value = "/leftQuery/queryAcctDate", method = RequestMethod.POST) 	public ResponseDto&lt;String&gt; queryAcctDate(); }</code></pre> <p>注意事项：</p> <p>1.@EnableFeignClients(basePackages="com.xxx") 如果不配置basePackages的话，那么默认只会扫描当前启动类包及其子包的@FeignClient注解</p> <p>2.@FeignClient里的path最好写上，而且是服务端的contextPath(value = "tfb-biz-common-service-app", path="/tfb-biz-common-service-app", qualifier="commonBizRpc")</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-51343.htm">猫打疫苗要打几针多少钱（猫打疫苗要打几针多少钱的）</a></p>
                                        <p>下一个：<a href="/news/article-51879.htm">vue如何根据条件判断按钮是否可以点击_vue.js</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-45325.htm" title="Android 白天黑夜模式切换适配及引起的Activity销毁重启解决">Android 白天黑夜模式切换适配及引起的Activity销毁重启解决</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-24-free-node-subscribe-links.htm" title="2月24日|V2ray/SSR/Clash/Shadowrocket每天更新20.8M/S免费节点订阅链接，付费节点订阅推荐">2月24日|V2ray/SSR/Clash/Shadowrocket每天更新20.8M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-28-node-share.htm" title="2月28日|Clash/V2ray/Shadowrocket/SSR每天更新18.6M/S免费节点订阅链接，付费节点订阅推荐">2月28日|Clash/V2ray/Shadowrocket/SSR每天更新18.6M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-20-clash-v2ray-ss-ssr.htm" title="2月20日|SSR/Clash/Shadowrocket/V2ray每天更新22.3M/S免费节点订阅链接，付费节点订阅推荐">2月20日|SSR/Clash/Shadowrocket/V2ray每天更新22.3M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-11-node-share.htm" title="2月11日|Clash/V2ray/SSR/Shadowrocket每天更新20.7M/S免费节点订阅链接，付费节点订阅推荐">2月11日|Clash/V2ray/SSR/Shadowrocket每天更新20.7M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-42852.htm" title="解决python针对hdfs上传和下载问题">解决python针对hdfs上传和下载问题</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-16-node-share-links.htm" title="2月16日|SSR/V2ray/Shadowrocket/Clash每天更新19.4M/S免费节点订阅链接，付费节点订阅推荐">2月16日|SSR/V2ray/Shadowrocket/Clash每天更新19.4M/S免费节点订阅链接，付费节点订阅推荐</a></li>
                        <li class="py-2"><a href="/news/article-59640.htm" title="南平领养猫（泉州领养猫）">南平领养猫（泉州领养猫）</a></li>
                        <li class="py-2"><a href="/news/article-65647.htm" title="C#使用RestClient调用Web API_C#教程">C#使用RestClient调用Web API_C#教程</a></li>
                        <li class="py-2"><a href="/news/article-61987.htm" title="动物打预防针多少钱（动物防疫***收费吗）">动物打预防针多少钱（动物防疫***收费吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End Details Section -->
    </main><!-- End #main -->
    <!-- ======= Footer ======= -->
<footer id="footer">
    <div class="container py-4">
        <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <a href="/">SSR Windows免费节点订阅站</a> 版权所有 Powered by WordPress
        </div>
    </div>
</footer><!-- End Footer -->
<a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
<!-- Vendor JS Files -->
<script src="/assets/website/js/frontend/ssrwindows/jquery-3.5.1.min.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/aos/aos.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/php-email-form/validate.js"></script>
<script src="/assets/website/js/frontend/ssrwindows/swiper/swiper-bundle.min.js"></script>
<!-- Template Main JS File -->
<script src="/assets/website/js/frontend/ssrwindows/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
<script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>